/*
 * Copyright (C) 2013 JFrog Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        mavenLocal()
        jcenter()
        dependencies {
            classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '+')
        }
    }
}

allprojects {
    apply plugin: 'com.jfrog.artifactory'
    apply plugin: 'idea'
    configure(subprojects.findAll { new File(it.projectDir, 'src').directory }) {
        apply plugin: 'java'
    }
    group = 'org.jfrog.example.gradle'
    version = currentVersion
    status = 'Integration'
}

artifactoryPublish.skip = true

subprojects {
    apply plugin: 'maven'

    if (project.plugins.hasPlugin('java')) {
        //manifest.mainAttributes(provider: 'gradle')
        manifest {
            attributes 'provider': 'gradle'
        }
        configurations {
            published
        }
        dependencies {
            testCompile 'junit:junit:4.7'
        }
        task sourceJar(type: Jar) {
            from sourceSets.main.allSource
            classifier = 'sources'
        }
        task javadocJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }
        artifactoryPublish {
            dependsOn sourceJar, javadocJar
        }
        artifacts {
            published sourceJar
            published javadocJar
        }
    }
}

configurations {
    published
}

artifactory {
    contextUrl = 'http://localhost:8081/artifactory'
    publish {
        repository {
            repoKey = "BAMBOO_OVERRIDES_THIS_FIELD" // The Artifactory repository key to publish to
            username = "BAMBOO_OVERRIDES_THIS_FIELD" // The publisher user name
            password = "BAMBOO_OVERRIDES_THIS_FIELD" // The publisher password
            // This is an optional section for configuring Ivy publication (when publishIvy = true).
            ivy {
                ivyLayout = '[organization]/[module]/ivy-[revision].xml'
                artifactLayout = '[organization]/[module]/[revision]/[module]-[revision](-[classifier]).[ext]'
                mavenCompatible = true //Convert any dots in an [organization] layout value to path separators, similar to Maven's groupId-to-path conversion. True if not specified
            }
        }
        defaults {
            // Reference to Gradle configurations defined in the build script.
            // This is how we tell the Artifactory Plugin which artifacts should be
            // published to Artifactory.
            publishConfigs('archives', 'published')
            // Properties to be attached to the published artifacts.
            properties = ['qa.level': 'basic', 'dev.team' : 'core']
            // You can also attach properties to published artifacts according to
            // the following notation:
            // <configuration name> <artifact spec>
            // The <configuration name> should be the name of the relevant Gradle Configuration or 'all'
            // (for all configurations).
            // Artifact spec has the following structure:
            // group:artifact:version:classifier@ext
            // Any element in the artifact spec notation can contain the * and ? wildcards.
            // For example:
            // org.acme:*:1.0.?_*:*@tgz
            properties {
                all '*:*:1.*:*@*', key1: 'val1', key2: 'val2'
                all 'org.jfrog.*:*:1.*:*@jar*', key3: 'val3', key4: 'val4'
            }
            publishPom = true // Publish generated POM files to Artifactory (true by default)
            publishIvy = true // Publish generated Ivy descriptor files to Artifactory (true by default)
        }
    }
}
