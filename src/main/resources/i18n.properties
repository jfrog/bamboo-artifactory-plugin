builder.gradle.pathHelp = Specify the location of your Gradle home
builder.ivy.pathHelp = Specify the location of your Ant home
builder.maven.pathHelp = Specify the location of your maven home
release.execute = Run Release
release.comment = Comment

artifactory.server.details = Artifactory Server Details
artifactory.server.description = Configure an Artifactory server that will be available to project configurations for deployment of artifacts and build info.\
                                 If anonymous user is enabled in Artifactory server, you can leave the username/password empty

artifactory.server.new = Add New Server Configuration
artifactory.server.edit = Edit Server Configuration

artifactory.server.url = Artifactory Server URL
artifactory.server.url.description = Specify the root URL of your Artifactory installation, like http://repo.jfrog.org/artifactory
artifactory.server.username = Username
artifactory.server.username.description = User with permissions to query the list of Artifactory repositories. Leave empty if anonymous is enabled.
artifactory.server.password = Password
artifactory.server.password.description = Password of the user with permissions to query the list of Artifactory repositories. Leave empty if anonymous is enabled.
artifactory.server.timeout = Request Timeout
artifactory.server.timeout.description = Network timeout in seconds to use both for connection establishment and for unanswered requests.

artifactory.release.submit = Build and Release to Artifactory
artifactory.release.title = Artifactory Pro Release Staging

artifactory.gradle.properyKey = Property Key
artifactory.gradle.currentValue = Current Value
artifactory.gradle.releaseValue = Release Value
artifactory.gradle.nextIntegrationValue = Next Integration Value

artifactory.maven.moduleVersionConfiguration = Module Version Configuration
artifactory.maven.currentValue = Current Value
artifactory.maven.releaseValue = Release Value
artifactory.maven.nextIntegrationValue = Next Integration Value
artifactory.maven.moduleId = Module Id

artifactory.task.maven.projectFile = Project File
artifactory.task.maven.goals = Goals
artifactory.task.maven.additionalMavenParams = Additional Maven Parameters
artifactory.task.maven.mavenOpts = Maven Opts
artifactory.task.maven.mavenOpts.description = Space-separated parameters to pass as MAVEN_OPTS (e.g.: -Dmaven.repo.local=/mnt/work). \
  Note: MAVEN_OPTS added as System Environment Variables will be ignored!
artifactory.task.maven.resolveFromArtifacts = Resolve artifacts from Artifactory
artifactory.task.maven.resolveFromArtifacts.description = Check if you wish all dependency resolution to go through Artifactory. \
  <br/> Notice: this will override any external repository definition in Maven settings or POM files.
artifactory.task.maven.resolutionArtifactoryServerUrl = Resolution Artifactory Server URL
artifactory.task.maven.resolutionArtifactoryServerUrl.description = Select an Artifactory server.
artifactory.task.maven.resolutionRepo = Resolution repository
artifactory.task.maven.resolverUsername = Resolver Username
artifactory.task.maven.resolverUsername.description = Name of a user with read permissions on the target repository.
artifactory.task.maven.resolverPassword = Resolver Password
artifactory.task.maven.resolverPassword.description = Password of a user with read permissions on the target repository.
artifactory.task.maven.artifactoryServerUrl = Artifactory Server URL
artifactory.task.maven.artifactoryServerUrl.description = Select an Artifactory server.
artifactory.task.maven.targetRepo = Target Repository
artifactory.task.maven.targetRepo.description = Select a target deployment repository.
artifactory.task.maven.deployerUsername = Deployer Username
artifactory.task.maven.deployerUsername.description = Name of a user with deployment permissions on the target repository.
artifactory.task.maven.deployerPassword = Deployer Password
artifactory.task.maven.deployerPassword.description = The password of the user entered above.
artifactory.task.maven.deployMavenArtifacts = Deploy Maven Artifacts
artifactory.task.maven.deployMavenArtifacts.description = Uncheck if you do not wish to deploy Maven artifacts from the plugin (a more efficient alternative to Maven's own 'deploy' goal).

artifactory.task.gradle.switches = Command-Line Options
artifactory.task.gradle.switches.description = Gradle <a href="http://gradle.org/latest/docs/userguide/tutorial_gradle_command_line.html" target="_blank">command-line options</a> to invoke.
artifactory.task.gradle.tasks = Tasks
artifactory.task.gradle.tasks.description = Gradle tasks to invoke.
artifactory.task.gradle.buildScript = Build Script Directory
artifactory.task.gradle.buildScript.description = If the build script is not located in the root of the build directory, specify the path (relative to the build directory).
artifactory.task.gradle.buildFile = Build Script File
artifactory.task.gradle.buildFile.description = If your gradle build script is not named build.gradle, specify the gradle build name script.
artifactory.task.gradle.useGradleWrapper = Use Gradle Wrapper
artifactory.task.gradle.gradleWrapperLocation = Gradle Wrapper Location
artifactory.task.gradle.gradleWrapperLocation.description = Path to the Gradle Wrapper executable. May be absolute or relative to the build directory. Defaults to ./gradlew
artifactory.task.gradle.artifactoryServerId = Artifactory Server URL
artifactory.task.gradle.artifactoryServerId.description = Select an Artifactory server.
artifactory.task.gradle.resolutionRepo = Resolution Repository
artifactory.task.gradle.resolutionRepo.description = Select a resolution repository.
artifactory.task.gradle.publishingRepo = Publishing Repository
artifactory.task.gradle.publishingRepo.description = Select a publishing repository.
artifactory.task.gradle.deployerUsername = Deployer Username
artifactory.task.gradle.deployerUsername.description = Name of a user with deployment permissions on the target repository.
artifactory.task.gradle.deployerPassword = Deployer Password
artifactory.task.gradle.deployerPassword.description = The password of the user entered above.
artifactory.task.gradle.useArtifactoryGradlePlugin = Project uses the Artifactory Gradle Plugin:
artifactory.task.gradle.useArtifactoryGradlePlugin.description = The Bamboo plugin automatically applies the Artifactory plugin (and, consequently, the artifactoryPublish task) to all projects.\
                                                                 Check this flag to have Bamboo skip this step if your project is already using the Artifactory plugin or the artifactoryPublish task directly. All elements in this job configuration will override matching project-level configuration elements.\
                                                                 If your project applies the Artifactory plugin using a custom init script, make sure to include your init script as part of the list of Gradle switches.
artifactory.task.gradle.publishArtifacts = Publish Artifacts to Artifactory
artifactory.task.gradle.publishArtifacts.description = Check if you wish to publish produced build artifacts to Artifactory.
artifactory.task.gradle.publishMavenDescriptors = Publish Maven Descriptors
artifactory.task.gradle.publishMavenDescriptors.description = Check if you wish to publish Gradle-generated POM files to Artifactory. Note: Maven descriptors are always deployed according to the Maven layout convention.
artifactory.task.gradle.publishIvyDescriptors = Publish Ivy Descriptors
artifactory.task.gradle.publishIvyDescriptors.description = Check if you wish to publish Gradle-generated ivy.xml descriptor files to Artifactory.
artifactory.task.gradle.useM2CompatiblePatterns = Use Maven 2 Compatible Patterns
artifactory.task.gradle.useM2CompatiblePatterns.description = Whether to use the default Maven 2 patterns when publishing artifacts and Ivy descriptors, or to use custom patterns.
artifactory.task.gradle.ivyPattern = Ivy Pattern
artifactory.task.gradle.ivyPattern.description = The <a href="http://ant.apache.org/ivy/history/latest-milestone/concept.html#patterns">pattern</a> to use for published Ivy descriptors.
artifactory.task.gradle.artifactPattern = Artifact Pattern
artifactory.task.gradle.artifactPattern.description = The <a href="http://ant.apache.org/ivy/history/latest-milestone/concept.html#patterns">pattern</a> to use for published artifacts.
artifactory.task.gradle.publishIncludePatterns = Publication Include Patterns
artifactory.task.gradle.publishIncludePatterns.description = Comma or space-separated list of <a href="http://ant.apache.org/manual/dirtasks.html#patterns" target="_blank">Ant-style patterns</a> \
                                                                 of files that will be included in publishing. Include patterns are applied on the published file path before any exclude patterns.
artifactory.task.gradle.publishExcludePatterns = Publication Exclude Patterns
artifactory.task.gradle.publishExcludePatterns.description = Comma or space-separated list of<a href="http://ant.apache.org/manual/dirtasks.html#patterns" target="_blank">Ant-style patterns</a> \
                                                                 of files that will be excluded from publishing. Exclude patterns are applied on the published file path before any exclude patterns.
artifactory.task.gradle.artifactSpecs = Artifact Properties
artifactory.task.gradle.artifactSpecs.description = A line-separated list of properties to attach to deployed artifacts.<br> \
                                                        Each lines specifies filtering rules by which to apply properties, in the format of:<br><br> \
                                                        <i>configurationName artifactFilter properties</i><br><br> \
                                                        <table border='0'> \
                                                        <tbody><tr> \
                                                        <td><i>configurationName: </i></td><td>The Gradle configuration. You can specify all to apply for all configurations.</td></tr> \
                                                        <tr><td><i>artifactFilter:</i></td><td>a filter in the format of group:artifact:version:classifier@ext - all fileds are mandatory and can take Ant-like wildcard patterns using * and ?. For example: org.acme:*:1.0.?_*:*@tgz</td></tr> \
                                                        <tr><td><i>properties:</i></td><td>a list of properties in the format of key1:val1, key2:val2, key3:val3<br></td> \
                                                        </tr></tbody></table><br>

artifactory.task.ivy.buildFile = Build File
artifactory.task.ivy.targets = Targets
artifactory.task.ivy.antOpts = Ant Opts
artifactory.task.ivy.antOpts.description = Space-separated parameters to pass as ANT_OPTS (Note that ANT_OPTS will be ignored if added as System Environment Variables).
artifactory.task.ivy.deployArtifacts = Deploy Artifacts
artifactory.task.ivy.deployArtifacts.description = Uncheck if you do not wish to deploy artifacts from the plugin.

artifactory.task.generic.title = Artifactory Generic Deploy
artifactory.task.generic.deployPattern = Edit Published Artifacts
artifactory.task.generic.deployPattern.description = New line or comma separated paths to build artifacts that will be published to Artifactory. Supports Ant-style<br/> wildcards mapping to target directories. E.g.:<br/> \
                                                         <b>**/*.zip=>winFiles</b> - Deploys all zip files under the working directory to the winFiles directory of the target repository, maintaining the original relative path for each file.<br/> \
                                                         <b>unix/*.tgz</b> - Deploys all tgz files under the unix directory to the root directory of the target repository, maintaining the original relative path for each file.<br/>


artifactory.task.deployIncludePatterns = Deployment Include Patterns
artifactory.task.deployIncludePatterns.description = Comma or space-separated list of <a href="http://ant.apache.org/manual/dirtasks.html#patterns" target="_blank">Ant-style patterns</a> \
  of files that will be included in publishing. Include patterns are applied on the published file path before any exclude patterns.
artifactory.task.deployExcludePatterns = Deployment Exclude Patterns
artifactory.task.deployExcludePatterns.description = Comma or space-separated list of <a href="http://ant.apache.org/manual/dirtasks.html#patterns" target="_blank">Ant-style patterns</a> \
  of files that will be excluded from publishing. Exclude patterns are applied on the published file path before any exclude patterns.
artifactory.task.filterExcludedArtifactsFromBuild = Filter excluded artifacts from build Info
artifactory.task.filterExcludedArtifactsFromBuild.description = Add the excluded files to the excludedArtifacts list and remove them from the artifacts list in the build info.
artifactory.task.publishBuildInfo = Capture and Publish Build Info
artifactory.task.publishBuildInfo.description = Check if you wish to publish build information to Artifactory.
artifactory.task.includeEnvVars = Include Environment Variables
artifactory.task.includeEnvVars.description = Check if you wish to include all environment variables accessible by the builds process.
artifactory.task.envVarsIncludePatterns = Environment Variables Include Patterns
artifactory.task.envVarsIncludePatterns.description = Comma or space-separated list of environment variables that will be included as part of the published build info. \
  Environment variables may contain the * and the ? wildcards. Include patterns are applied before any exclude patterns.
artifactory.task.envVarsExcludePatterns = Environment Variables Exclude Patterns
artifactory.task.envVarsExcludePatterns.description = Comma or space-separated list of environment variables that will be excluded as part of the published build info. \
  Environment variables may contain the * and the ? wildcards. Exclude patterns are applied after any include patterns.
artifactory.task.runLicenseChecks = Run License Checks (Requires Pro)
artifactory.task.runLicenseChecks.description = Check if you wish that automatic license scanning will occur after build is complete.
artifactory.task.licenseViolationRecipients = Send License Violation Notifications to
artifactory.task.licenseViolationRecipients.description = Whitespace-separated list of recipient addresses.
artifactory.task.limitChecksToScopes = Limit Checks To The Following Scopes
artifactory.task.limitChecksToScopes.description = Space-separated list of scopes.
artifactory.task.includePublishedArtifacts = Include Published Artifacts
artifactory.task.includePublishedArtifacts.description = Include the build's published module artifacts in the license violation checks if they are also used as dependencies for other modules in this build.
artifactory.task.disableAutoLicenseDiscovery = Disable Automatic License Discovery
artifactory.task.disableAutoLicenseDiscovery.description = Tells Artifactory to not try and automatically analyze and tag the build's dependencies with license information upon deployment. \
  You can still attach license information manually by running 'Auto-Find' from the build's Licenses tab in Artifactory.

artifactory.task.release.enableReleaseManagement = Enable Release Management
artifactory.task.release.enableReleaseManagement.description = Enable Release Management to Artifactory
artifactory.task.release.vcsTagBase = VCS Tags Base URL/Name
artifactory.task.release.vcsTagBase.description = For subversion this is the URL of the tags location, for Git and Perforce this is the name of the tag/label.
artifactory.task.release.gitReleaseBranch = Git Release Branch Name Prefix
artifactory.task.release.gitReleaseBranch.description = The prefix of the release branch name (applicable only to Git).
artifactory.task.release.alternativeTasks = Alternative Maven Tasks and Options
artifactory.task.release.alternativeTasks.description = Alternative Maven and options to execute for a Maven build running as part of the release. \
  If left empty, the build will use original tasks and options instead of replacing them.
artifactory.task.release.releaseProps = Release Properties
artifactory.task.release.releaseProps.description = Properties in your projects gradle.properties file whose value should change upon release.
artifactory.task.release.nextIntegProps = Next Integration Properties
artifactory.task.release.nextIntegProps.description = Properties in your projects gradle.properties file whose value should change upon release, but also for work on the next integration/development version after the release has been created.
artifactory.task.release.gradle.alternativeTasks = Alternative Gradle Tasks and Options
artifactory.task.release.gradle.alternativeTasks.description = Alternative tasks and options to execute for a Gradle build running as part of the release. If left empty, the build will use original tasks and options instead of replacing them.


artifactory.vcs.useReleaseBranch = Use Release Branch:
artifactory.vcs.releaseBranch = Release branch:
artifactory.vcs.createVcsTag = Create VCS Tag
artifactory.vcs.tagUrl = Tag URL/name:
artifactory.vcs.tagComment = Tag comment:
artifactory.vcs.nextDevelopmentComment = Next development version comment:
artifactory.vcs.releasePublishingRepo = Publishing Repository:
artifactory.vcs.releasePublishingRepo.description = Select a publishing repository.
artifactory.vcs.stagingComment = Staging Comment:

#blackduck integration
artifactory.task.blackduck.runChecks = Run Black Duck Code Center compliance checks (requires Artifactory Pro)
artifactory.task.blackduck.runChecks.description = Check if you wish that automatic Black Duck Code Center compliance checks will occur after the build is completed.
artifactory.task.blackduck.appName = Code Center application name
artifactory.task.blackduck.appName.description = The existing Black Duck Code Center application name.
artifactory.task.blackduck.appVersion = Code Center application version
artifactory.task.blackduck.appVersion.description = The existing Black Duck Code Center application version.
artifactory.task.blackduck.reportRecipients = Send compliance report email to:
artifactory.task.blackduck.reportRecipients.description = Input recipients that will receive a report email after the automatic Black Duck Code Center compliance checks finished.
artifactory.task.blackduck.scopes = Limit checks to the following scopes:
artifactory.task.blackduck.scopes.description = A list of dependency scopes/configurations to run Black Duck Code Center compliance checks on. \
  If left empty all dependencies from all scopes will be checked.
artifactory.task.blackduck.includePublishedArtifacts = Include published artifacts
artifactory.task.blackduck.includePublishedArtifacts.description = Include the build's published module artifacts in the Black Duck Code Center compliance checks \
  if they are also used as dependencies for other modules in this build.
artifactory.task.blackduck.autoCreateMissingComponentRequests = Auto-create missing component requests
artifactory.task.blackduck.autoCreateMissingComponentRequests.description = Auto create missing components in Black Duck Code Center application after the build is completed and deployed in Artifactory.
artifactory.task.blackduck.autoDiscardStaleComponentRequests = Auto-discard stale component requests
artifactory.task.blackduck.autoDiscardStaleComponentRequests.description = Auto discard stale components in Black Duck Code Center application after the build is completed and deployed in Artifactory.
